Classes and Objects in Java

Class :-  A class is a user defined blueprint or prototype from which objects are created. It represents the set of properties or methods that are common to all objects of one type. 

Objects:- It is a basic unit of Object Oriented Programming and represents the real life entities. A typical Java program creates many objects, which as you know, interact by invoking methods.
An object consists of :
State : It is represented by attributes of an object. It also reflects the properties of an object.
Behavior : It is represented by methods of an object. It also reflects the response of an object with other objects.
Identity : It gives a unique name to an object and enables one object to interact with other objects.

Ways to create object of a class

There are four ways to create objects in java.Strictly speaking there is only one way(by using new keyword),and the rest internally use new keyword.

Using new keyword : It is the most common and general way to create object in java. Example:         
             // creating object of class Test
             Test t = new Test();
						 
Using Class.forName(String className) method : There is a pre-defined class in java.lang package with name Class. The forName(String className) method returns the Class object associated with the class with the given string name.We have to give the fully qualified name for a class. On calling new Instance() method on this Class object returns new instance of the class with the given string name.
            // creating object of public class Test
           // consider class Test present in com.p1 package
              Test obj = (Test)Class.forName("com.p1.Test").newInstance();
							
Using clone() method: clone() method is present in Object class. It creates and returns a copy of the object.
          // creating object of class Test
             Test t1 = new Test();
         // creating clone of above object
             Test t2 = (Test)t1.clone();
 
Deserialization : De-serialization is technique of reading an object from the saved state in a file. Refer Serialization/De-Serialization in java
            FileInputStream file = new FileInputStream(filename);
            ObjectInputStream in = new ObjectInputStream(file);
            Object obj = in.readObject();
			
Anonymous objects :-  Anonymous objects are the objects that are instantiated but are not stored in a reference variable.

They are used for immediate method calling.
They will be destroyed after method calling.
They are widely used in different libraries.

btn.setOnAction(new EventHandler()
{
    public void handle(ActionEvent event)
    {
        System.out.println("Hello World!");
    }
});
